coviddeaths<-read.csv("data/ScotlandCovidDeaths.csv")

library(sf)
IZ<-read_sf("boundaries/IZ/SG_IntermediateZone_Bdry_2011.shp")

IZcoviddeaths<-merge(IZ, coviddeaths, by.x="InterZone", by.y="Intermediate.Zone.code")
st_crs(IZcoviddeaths)

library(tmap)

#################### all the councils that surround the main cities - Glasgow, Aberdeen and Edinburgh.

Scotlandmap<-tm_shape(IZcoviddeaths) + 
  tm_fill("rate.per.100.000.population", style = "quantile", palette = "Blues") +
  tm_borders(alpha = 0.1) +
  tm_layout(main.title = "COVID deaths per 100,000 pop", main.title.size = 0.7 ,
            legend.position = c("left", "top"), legend.title.size = 0.8)

lookup<-read.csv("data/IZtoLAlookup.csv")
IZcoviddeaths<-merge(IZcoviddeaths, lookup, by.x="InterZone", by.y="IntZone")
IZEDcoviddeaths<-subset(IZcoviddeaths, CAName%in%c("City of Edinburgh"))

tmap_mode("view")
Edinburghmap<-tm_shape(IZEDcoviddeaths) + 
  tm_fill("rate.per.100.000.population", style = "quantile", palette = "Blues") +
  tm_borders(alpha = 0.1) +
  tm_layout(main.title = "COVID deaths per 100,000 pop", main.title.size = 0.7 ,
            legend.position = c("right", "bottom"), legend.title.size = 0.8)

### convert to sp object
library(sp)
library(spdep)
IZEDcoviddeathssp <- as(IZEDcoviddeaths, "Spatial")
w <- poly2nb(IZEDcoviddeathssp, row.names=IZEDcoviddeathssp$InterZone, snap=110)

### snapping senstivity

plot(IZEDcoviddeathssp, col='gray', border='blue', lwd=2)
#Then we use the coordinates function to obtain the coordinates of the polygon centroids
xy <- coordinates(IZEDcoviddeathssp)
#Then we draw lines between the polygons centroids for neighbours that are listed as linked in w
plot(w, xy, col='red', lwd=2, add=TRUE)


wm <- nb2mat(w, style='B')
wm

wm_rs <- nb2mat(w, style='W')
wm_rs

ww <-  nb2listw(w, style='B')
ww

moran(IZEDcoviddeathssp$rate.per.100.000.population, ww, n=length(ww$neighbours), S0=Szero(ww))


set.seed(1234) # The seed number you choose is the starting point used in the generation of a sequence of random numbers, which is why (provided you use the same pseudo-random number generator) you'll obtain the same results given the same seed number. 
burg_moranmc_results <- moran.mc(IZEDcoviddeathssp$rate.per.100.000.population, ww, nsim=99)
burg_moranmc_results


rwm <- mat2listw(wm, style='W')
# Checking if rows add up to 1 (they should)
mat <- listw2mat(rwm)
#This code is simply adding each row to see if we get one when we add their values up, we are only displaying the first 15 rows in the matrix
apply(mat, 1, sum)[1:15]


moran.plot(IZEDcoviddeathssp$rate.per.100.000.population, rwm)

moran.plot(IZEDcoviddeathssp$rate.per.100.000.population, ww)



locm_bm <- localmoran(IZEDcoviddeathssp$rate.per.100.000.population, ww)
summary(locm_bm)

IZEDcoviddeathssp$s_rate.per.100.000.population <- scale(IZEDcoviddeathssp$rate.per.100.000.population) %>% as.vector()

IZEDcoviddeathssp$lag_s_rate.per.100.000.population <- lag.listw(ww, IZEDcoviddeathssp$s_rate.per.100.000.population)

x <- IZEDcoviddeathssp$s_rate.per.100.000.population
y <- IZEDcoviddeathssp$lag_s_rate.per.100.000.population 
xx <- tibble::data_frame(x,y)

library(dplyr)
IZEDcoviddeathssp <- st_as_sf(IZEDcoviddeathssp) %>% 
  mutate(quad_sig = ifelse(IZEDcoviddeathssp$s_rate.per.100.000.population > 0 & 
                             IZEDcoviddeathssp$lag_s_rate.per.100.000.population  > 0 & 
                             locm_bm[,5] <= 0.01, 
                           "high-high",
                           ifelse(IZEDcoviddeathssp$s_rate.per.100.000.population <= 0 & 
                                    IZEDcoviddeathssp$lag_s_rate.per.100.000.population  <= 0 & 
                                    locm_bm[,5] <= 0.01, 
                                  "low-low", 
                                  ifelse(IZEDcoviddeathssp$s_rate.per.100.000.population> 0 & 
                                           IZEDcoviddeathssp$lag_s_rate.per.100.000.population  <= 0 & 
                                           locm_bm[,5] <= 0.01, 
                                         "high-low",
                                         ifelse(IZEDcoviddeathssp$s_rate.per.100.000.population <= 0 & 
                                                  IZEDcoviddeathssp$lag_s_rate.per.100.000.population  > 0 & 
                                                  locm_bm[,5] <= 0.01,
                                                "low-high", 
                                                "non-significant")))))


qtm(IZEDcoviddeathssp, fill="quad_sig", fill.title="LISA")



